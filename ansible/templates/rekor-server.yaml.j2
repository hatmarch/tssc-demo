apiVersion: apps/v1
kind: Deployment
metadata:
  annotations:
    alpha.image.policy.openshift.io/resolve-names: '*'
    openshift.io/generated-by: OpenShiftWebConsole
  labels:
    app: rekor-server
    app.kubernetes.io/component: rekor-server
    app.kubernetes.io/instance: rekor-server
    app.openshift.io/runtime: apache
    app.openshift.io/runtime-namespace: rekor-operator-system
  name: rekor-server
  namespace: "{{ rekor_project }}"
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: rekor-server
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      annotations:
        openshift.io/generated-by: OpenShiftWebConsole
      creationTimestamp: null
      labels:
        app: rekor-server
        deploymentconfig: rekor-server
    spec:
      containers:
        - args:
            - rekor-server
            - serve
            - --trillian_log_server.address=trillian-log
            - --trillian_log_server.port=8091
            - --rekor_server.address=0.0.0.0
            - --redis_server.address=redis
            - --redis_server.port=6379
            - --log_type=prod
          image: "{{ rekor_server_image }}" 
          imagePullPolicy: IfNotPresent
          name: rekor-server
          ports:
            - containerPort: 3000
              protocol: TCP
          resources:
            requests:
              cpu: 500m
              memory: 1G
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    openshift.io/generated-by: OpenShiftWebConsole
  labels:
    app: rekor-server
    app.kubernetes.io/component: rekor-server
    app.kubernetes.io/instance: rekor-server
    app.openshift.io/runtime-version: "0.1"
  name: rekor-server
  namespace: "{{ rekor_project }}"
spec:
  ports:
    - name: 3000-tcp
      port: 3000
      protocol: TCP
      targetPort: 3000
  selector:
    app: rekor-server
    deploymentconfig: rekor-server
  sessionAffinity: None
  type: ClusterIP

